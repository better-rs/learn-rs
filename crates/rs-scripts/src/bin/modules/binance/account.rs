use binance_async::{
    account::*, api::*, config::Config, errors::Error as BinanceLibError, general::*, market::*,
    rest_model::*, wallet::*,
};

use binance_async::wallet::*;

use chrono::{Duration, TimeZone, Utc};
use log::{debug, error, info, warn};
#[allow(unused_imports)]
use pretty_env_logger;

// account:
pub struct AccountService {
    client: Account,
}

impl AccountService {
    pub fn new(api_key: Option<String>, secret_key: Option<String>) -> Self {
        Self { client: Binance::new(api_key, secret_key) }
    }

    // ÊâìÂç∞Áî®Êà∑‰ΩôÈ¢ù:
    pub async fn get_all_balance(&self) {
        match self.client.get_account().await {
            Ok(answer) => {
                for balance in answer.balances {
                    // let free: f64 = balance.free.parse().unwrap();
                    // let locked: f64 = balance.locked.parse().unwrap();
                    let free = balance.free;
                    let locked = balance.locked;

                    // ÊòæÂºèËµÑÈáë>0ÁöÑÂ∏ÅÁßç‰ΩôÈ¢ù:
                    if free + locked > 0.0 {
                        info!("üçÑ {:?}: {:?}", balance.asset, balance);
                    }
                }
            },
            Err(e) => error!("Error: {:?}", e),
        }
    }

    // ÊâπÈáèËé∑ÂèñÂ∏ÅÁßç‰ΩôÈ¢ù:
    pub async fn get_balance_by_coins(&self, coins: &Vec<&str>) {
        // todo x: fix vec.iter(), not vec itself
        for coin in coins.iter() {
            match self.client.get_balance(coin.to_string()).await {
                Ok(answer) => {
                    info!("üçÑ {}: {:?}", coin, answer);
                },
                Err(e) => error!("Error: {:?}", e),
            }
        }
    }

    pub async fn calc_avg_cost_by_coins(&self, coins: &Vec<&str>) {
        for coin in coins.iter() {
            self.calc_avg_cost_by_coin(coin).await;
        }
    }

    // Âçï‰∏™Â∏ÅÁßç, Â§ö‰∏™‰∫§ÊòìÂØπËÆ°ÁÆó:
    pub async fn calc_avg_cost_by_coin(&self, coin: &str) {
        // ‰ΩøÁî® BUSD/USDT Ë¥≠‰π∞Ëøá DOT: // Â§ö‰∏™‰∫§ÊòìÂØπÂ§çÂêàËÆ°ÁÆóÂπ≥ÂùáÊàêÊú¨
        let coin_pairs = vec![
            (coin.to_owned() + "BUSD").to_string(), // ‰∫§ÊòìÂØπ
            (coin.to_owned() + "USDT").to_string(), // ‰∫§ÊòìÂØπ
        ];

        // ‰π∞Âçï:
        let mut buy_total_qty: f64 = 0.0;
        let mut buy_total_cost: f64 = 0.0;
        let mut buy_avg_price: f64 = 0.0;

        // ÂçñÂçï:
        let mut sell_total_qty: f64 = 0.0;
        let mut sell_total_cost: f64 = 0.0;
        let mut sell_avg_price: f64 = 0.0;

        // ÂΩìÂâçÂπ≥ÂùáÊåÅÊúâÊàêÊú¨:
        let mut current_avg_price: f64 = 0.0;
        let mut current_total_qty: f64 = 0.0;

        info!("üí∞ {:?} analyze:", coin);

        // Â§ö‰∏™‰∫§ÊòìÂØπÂêàÂπ∂ËÆ°ÁÆó:
        for coin_pair in coin_pairs {
            // my_trades:
            match self.client.trade_history(&coin_pair).await {
                Ok(answer) => {
                    debug!("coin pair: {:?} trade history:", coin_pair);
                    // ËÆ°ÁÆó:
                    for trade in answer {
                        let ts = Utc.timestamp((trade.time as i64) / 1000, 0); // fix
                        // buy:
                        if trade.is_buyer {
                            // ‰π∞Âçï: ÊÄªÊï∞Èáè
                            buy_total_qty += trade.qty;
                            // ‰π∞Âçï: ÊÄªÊàêÊú¨
                            buy_total_cost += trade.qty * trade.price;

                            debug!(
                                "üçÑ {:?}, buyer={:?},  id={:?}, {:?}, price: {:?}, qty: {:?}",
                                ts.to_string(),
                                trade.is_buyer,
                                trade.id,
                                coin_pair,
                                trade.price,
                                trade.qty,
                            );
                        } else {
                            // ÂçñÂçï: ÊÄªÊï∞Èáè
                            sell_total_qty += trade.qty;
                            // ÂçñÂçï: ÊÄªÊàêÊú¨
                            sell_total_cost += trade.qty * trade.price;

                            debug!(
                                "üí∞ {:?}, buyer={:?}, id={:?}, {:?}, price: {:?}, qty: {:?}",
                                ts.to_string(),
                                trade.is_buyer,
                                trade.id,
                                coin_pair,
                                trade.price,
                                trade.qty,
                            );
                        }
                    }

                    // ÁªüËÆ°:
                    buy_avg_price = buy_total_cost / buy_total_qty;
                    sell_avg_price = sell_total_cost / sell_total_qty;

                    current_total_qty = buy_total_qty - sell_total_qty;
                    current_avg_price = (buy_total_cost - sell_total_cost) / current_total_qty;
                },
                Err(e) => error!("Error: {:?}", e),
            }

            info!(
                "üêõ {:?}, buy: total_qty: {:20?}, \tüêõ total_cost: {:20?}, \tüêõ avg_price: {:20?}",
                coin_pair, buy_total_qty, buy_total_cost, buy_avg_price
            );
            info!(
                "üêõ {:?}, sell: total_qty: {:20?}, \tüêõ total_cost: {:20?}, \tüêõ avg_price: {:20?}",
                coin_pair, sell_total_qty, sell_total_cost, sell_avg_price
            );
        }

        // ‰π∞Âçï:
        warn!(
            "üíé buy: total_qty: {:10.20?}, \tüíé total_cost: {:20?}, \tüíé avg_price: {:20?}",
            buy_total_qty, buy_total_cost, buy_avg_price
        );
        warn!(
            "üíé sell: total_qty: {:10.20?}, \tüíé total_cost: {:20?}, \tüíé avg_price: {:20?}",
            sell_total_qty, sell_total_cost, sell_avg_price
        );
        warn!(
            "üíé current: total_qty: {:10.20?}, \tüíé avg_price: {:20?}\n",
            current_total_qty, current_avg_price
        );
    }
}

// auth:
pub async fn do_account_cmd(api_key: &str, secret_key: &str) {
    let cli = AccountService::new(Some(api_key.into()), Some(secret_key.into()));

    // Â§ö‰∏™Â∏ÅÁßçËÆ°ÁÆó:
    let coins = vec!["BTC", "ETH", "BNB", "SOL", "FIL", "DOT"];

    // ÊâìÂç∞Ë¥¶Âè∑‰ΩôÈ¢ù:
    cli.get_all_balance().await;

    // ÊâπÈáèËÆ°ÁÆóÂ§ö‰∏™Â∏ÅÁßç:
    cli.calc_avg_cost_by_coins(&coins).await; // todo x: fix ÂèÇÊï∞Á±ªÂûã, Êîπ‰∏∫ ÂºïÁî®Á±ªÂûã, Âê¶Âàô‰ºöÂá∫Áé∞ move ÈîôËØØ, rust ÁöÑÁîüÂëΩÂë®Êúü

    // Êü•ËØ¢Â∏ÅÁßç‰ΩôÈ¢ù:
    cli.get_balance_by_coins(&coins).await;

    warn!("do account cmd done.")

    // match account.get_open_orders(coin_pair) {
    //     Ok(answer) => println!("open orders: {:?}\n\n", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }

    // match account.limit_buy(coin_pair, 10, 0.014000) {
    //     Ok(answer) => println!("{:?}", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }
    //
    // match account.market_buy(coin_pair, 5) {
    //     Ok(answer) => println!("{:?}", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }

    // match account.limit_sell(coin_pair, 10, 0.035000) {
    //     Ok(answer) => println!("{:?}", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }
    //
    // match account.market_sell(coin_pair, 5) {
    //     Ok(answer) => println!("{:?}", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }

    // match account.custom_order(coin_pair, 9999, 0.0123, "SELL", "LIMIT", "IOC") {
    //     Ok(answer) => println!("{:?}", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }

    // let order_id = 1_957_528;
    // match account.order_status(coin_pair, order_id) {
    //     Ok(answer) => println!("order status: {:?}\n\n", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }

    // match account.cancel_order(coin_pair, order_id) {
    //     Ok(answer) => println!("{:?}", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }

    // match account.cancel_all_open_orders(coin_pair) {
    //     Ok(answer) => println!("{:?}", answer),
    //     Err(e) => println!("Error: {:?}", e),
    // }
}
